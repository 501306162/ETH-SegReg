#ifndef FOREST_H_
#define FOREST_H_

#include "tree.h"
#include "data.h"
#include <iostream>
#include "hyperparameters.h"
#include <string>
#include <vector>
#include <boost/numeric/ublas/matrix.hpp>

using namespace boost::numeric::ublas;

#ifdef USE_CUDA
#include "cudatemplates/devicememorypitched.hpp"
//#include "cudatemplates/devicememorylinear.hpp"
//#include "cudatemplates/hostmemoryreference.hpp"
#include "cudatemplates/hostmemoryheap.hpp"
//#include "cudatemplates/copy.hpp"
#include "cuda/icg_rf_interface.cuh"
#endif

#ifdef WIN32
#pragma warning( disable : 4290 )
//warning C4290:  C++ exception specification ignored except to indicate a function
//                is not __declspec(nothrow)
#endif

class Forest
{
public:
    Forest(const HyperParameters hp);
    Forest();
    ~Forest();


    void train(const matrix<float>& data, const std::vector<int> labels);
    void eval(const matrix<float>& data, const std::vector<int> labels);

    void save(const std::string &name = "default");
    void load(const std::string &name = "default");

    double oobe() const;

private:
    std::vector<Tree> m_trees;

#ifdef USE_CUDA
    Cuda::HostMemoryHeap<float,2> m_forest_h;
    Cuda::DeviceMemoryPitched<float,2> m_forest_d;
#endif

    HyperParameters m_hp;

    matrix<float> m_confidences;
    std::vector<int> m_predictions;

    void trainByCPU(const matrix<float>& data, const std::vector<int> labels);
    void trainByGPU(const matrix<float>& data, const std::vector<int> labels);
    void evalByCPU(const matrix<float>& data, const std::vector<int> labels);
    void evalByGPU(const matrix<float>& data, const std::vector<int> labels);

};

#endif /* FOREST_H_ */
