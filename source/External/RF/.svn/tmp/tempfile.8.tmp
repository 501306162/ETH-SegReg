#include "node.h"
#include "hyperparameters.h"
#include "utilities.h"
#include <boost/shared_ptr.hpp>
#include <string>
#include <iostream>
#include <boost/numeric/ublas/matrix.hpp>
#include <libxml/tree.h>

#ifndef NODE_GINI_
#define NODE_GINI_

using namespace boost::numeric::ublas;
using namespace std;

const char* const NODE_GINI = "nodeGini";

class NodeGini : public Node
{
 public:
    typedef boost::shared_ptr<NodeGini> Ptr;

    NodeGini(HyperParameters hp, int depth);
    NodeGini(HyperParameters hp, int depth, int reset);

    virtual xmlNodePtr save() const;

    virtual NODE_TRAIN_STATUS train(const matrix<float>& data, const std::vector<int>& labels, std::vector<int>& inBagSamples,
               matrix<float>& confidences, std::vector<int>& predictions);
    virtual void eval(const matrix<float>& data, const std::vector<int>& labels, const std::vector<int>& sampleIndeces,
              matrix<float>& confidences, std::vector<int>& predictions);


    virtual inline int bestFeature() const { return m_bestFeature; };

    virtual inline float bestThreshold() const { return m_bestThreshold; };

private:
    void findHypotheses(const matrix<float>& data, const std::vector<int>& labels,
                        const std::vector<int>& inBagSamples, const std::vector<int>& randFeatures);

    void evalNode(const matrix<float>& data, const std::vector<int>& inBagSamples,
                  std::vector<int>& leftNodeSamples, std::vector<int>& rightNodeSamples);

    std::pair<float, float> calcGiniAndThreshold(const std::vector<int>& labels,
                                                 const std::vector<std::pair<float, int> >& responses);
    xmlNodePtr saveFeature() const;
    double m_gini;
    int m_bestFeature;
    float m_bestThreshold;
};


#endif // NODE_GINI_
