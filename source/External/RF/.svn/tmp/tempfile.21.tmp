#include "node.h"
#include "hyperparameters.h"
#include "utilities.h"
#include <boost/shared_ptr.hpp>
#include <string>
#include <iostream>
#include <boost/numeric/ublas/matrix.hpp>
#include "../extern/svm/liblinear-1.33/linear.h"
#include <libxml/tree.h>
#include <libxml/parser.h>

#ifndef NODE_SVM_
#define NODE_SVM_

using namespace boost::numeric::ublas;
using namespace std;

const char* const NODE_SVM = "nodeSVM";

class NodeSVM : public Node {
public:
    typedef boost::shared_ptr<NodeSVM> Ptr;

    NodeSVM(HyperParameters hp, int depth);
    NodeSVM(HyperParameters hp, int depth, int reset);
<<<<<<< .mine
    NodeSVM(HyperParameters hp, int reset, const xmlNodePtr nodeNode);
=======
    ~NodeSVM();
>>>>>>> .r72

    virtual xmlNodePtr save() const;

    virtual NODE_TRAIN_STATUS train(const matrix<float>& data, const std::vector<int>& labels, std::vector<int>& inBagSamples,
                                    matrix<float>& confidences, std::vector<int>& predictions);

    virtual void eval(const matrix<float>& data, const std::vector<int>& labels, const std::vector<int>& sampleIndeces,
                      matrix<float>& confidences, std::vector<int>& predictions);


    virtual inline int bestFeature() const {
      return -1;
    };

    virtual inline float bestThreshold() const {
      return 0;
    };

private:
    void evalNode(const matrix<float>& data, const std::vector<int>& inBagSamples,
                  std::vector<int>& leftNodeSamples, std::vector<int>& rightNodeSamples);
    xmlNodePtr saveFeature() const;

    void convertData(const matrix<float>& data, const std::vector<int>& labels, const std::vector<int>& inBagSamples);
    void cleanProblem();

    parameter* m_svmParameters;
    model* m_svmModel;
    problem* m_svmProblem;
    feature_node* m_svmX;
};

#endif // NODE_SVM_
